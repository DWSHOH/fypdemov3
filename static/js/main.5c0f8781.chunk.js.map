{"version":3,"sources":["classes/TextfieldC.js","classes/TextareaC.js","classes/ParagraphC.js","classes/NumberC.js","classes/HiddeninputC.js","classes/HeaderC.js","classes/FileuploadC.js","classes/DatefieldC.js","classes/SelectC.js","classes/RadioC.js","classes/CheckboxgroupC.js","classes/Demoready.js","index.js"],"names":["TextfieldC","props","testjQueryobj1","testJSONSchemaobj","testNewObj","console","log","newOtherclassObject","sessionStorage","getItem","testitem","JSON","stringify","parse","type","labelString","label","descriptionString","description","placeholderString","placeholder","classNameString","className","nameString","name","valueString","value","maxlengthString","maxlength","length","labelLength","descriptionLength","placeholderLength","classNameLength","nameLength","valueLength","slice","jsonSchema","properties","subtype","uiSchema","required","formData","render","schema","children","document","getElementById","Component","TextareaC","rowsString","rows","ParagraphC","this","title","NumberC","max","min","step","Number","HiddeninputC","HeaderC","FileuploadC","DatefieldC","SelectC","ftestnewobj","numberOfArrays","values","i","teststorage","multiple","definitions","multipleChoicesList","RadioC","bb","cc","dd","Object","inline","CheckboxgroupC","Array","window","jQuery","$","require","fbEditor","formBuilder","disableFields","controlOrder","addEventListener","alert","actions","getData","jqfbd","setItem","testjsonstring"],"mappings":"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","file":"static/js/main.5c0f8781.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\n\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n\nconst log = (type) => console.log.bind(console, type);\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass TextfieldC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"text\",\n    \"required\": true,\n    \"label\": \"username\",\n    \"description\": \"This should be your user name\",\n    \"placeholder\": \"nick\",\n    \"className\": \"form-control\",\n    \"name\": \"text-1595570828299\",\n    \"access\": true,\n    \"value\": \"nigel\",\n    \"subtype\": \"text\",\n    \"maxlength\": 5,\n    \"role\": \"1\"\n  }\n  \n\n  /*\n  Mapping \n  jquery                                            jsonSchema\n  \"type\"   (d)                                         \"type\"\n  \"subtype\" textfield/password/email/color/tel  (pd)    \"ui:widget\" firstname/lastname/age/bio/password/date/telephone\n  \"required\"   (d)                                     \"required\"\n  \"label\"     (d)                                      \"title\"\n  \"description\" (d)                                    ui schema - \"ui:description\"\n  \"placeholder\" (d)                                    \"default\": \"Chuck\"\n  \"className\"  (d)                                         uischema -  classNames: \"custom-css-class\"\n  \"name\" (d)                                           property name - \"name\"\n  \"access\" When unchecked role = nonexistent\n  \"value\"(d)                                            \"formData\" - \"firstName\" <--property name\n  \"maxlength\"(d)                                        json schema - maximum\n  \"role\"\n  */\n\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery in class textfield\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n  \n  \n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n  \n  //var newOtherclassObjectt = sessionStorage.getItem(\"extranewObjCreated\")\n  \n  //console.log(\"content of newotherclassobjectt\", newOtherclassObjectt)\n  \n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  \n  //mapping for type\n  if(this.testjQueryobj1.type === \"text\"){\n    console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var descriptionString = JSON.stringify(this.testjQueryobj1.description);\n  var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  var valueString = JSON.stringify(this.testjQueryobj1.value);\n  var maxlengthString = JSON.stringify(this.testjQueryobj1.maxlength);\n  \n  //check length of string + null catching\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  if (descriptionString != null && descriptionString.length < 1) {\n    var descriptionLength = descriptionString.length;\n    console.log(\"this is being executed\")\n  } else {}\n\n  if (placeholderString != null && placeholderString.length < 1) {\n    var placeholderLength = placeholderString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  if (valueString != null && valueString.length < 1) {\n    var valueLength = valueString.length;\n    console.log(\"this is being executed\")\n  } else {}\n\n  if (maxlengthString != null && maxlengthString.length < 1) {\n    var maxlengthLength = maxlengthString.length;\n    console.log(\"this is being executed\")\n  } else {}\n\n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n\n    //check not null\n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    \n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": \"string\",\n        \"title\": this.testjQueryobj1.label,\n        \"default\": this.testjQueryobj1.placeholder\n        \n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      /*\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      }*/\n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  //mapping for description\n  if(descriptionLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", descriptionString);\n    if (descriptionString != null && descriptionString.length < 1) {\n      descriptionString = descriptionString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    \n    //this.testNewObj.uiSchema[nameString][\"ui:description\"] = descriptionString;\n    \n  }\n  //mapping for placeholder\n  if(placeholderLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", placeholderString);\n  }\n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    \n    //this.testNewObj.uiSchema[nameString][\"classNames\"] = classNameString;\n  }\n  \n\n  //mapping for value\n  if(valueLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", valueString);\n    //valueString = valueString.slice(1,-1);\n    this.testNewObj.formData = {\n      [nameString] :  this.testjQueryobj1.value\n    } \n  }\n  //mapping for max length\n  if(maxlengthLength <= 2 && null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", maxlengthString);\n  }\n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n\n  //render the object created  \n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    formData={this.testNewObj.formData}\n    children={true}\n  ></Form>),document.getElementById(\"root\"));\n}\n\n  render(){return ( <div><h2></h2></div> ) }\n \n  \n}\n\n\n\nexport default TextfieldC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass TextareaC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"textarea\",\n    \"required\": false,\n    \"label\": \"Bio\",\n    \"description\": \"help\",\n    \"placeholder\": \"Place some thing here\",\n    \"className\": \"form-control\",\n    \"name\": \"textarea-1595571051628\",\n    \"access\": true,\n    \"value\": \"nigel\",\n    \"subtype\": \"textarea\",\n    \"maxlength\": 5000,\n    \"rows\": 3,\n    \"role\": \"1\"\n  }\n  \n  //type and rows are unique to text area compared to text field\n  /*\n    Things adjusted:\n    1) ui widget to text area\n    2) rows value in take\n  */\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\n\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  //this.testjQueryobj1 = localStorage.getItem(\"newObjCreated\")\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  //mapping for type\n  if(this.testjQueryobj1.type === \"textarea\"){\n    console.log(\"Check for correct type\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working due no textarea detected\")\n  }\n\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var descriptionString = JSON.stringify(this.testjQueryobj1.description);\n  var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  var valueString = JSON.stringify(this.testjQueryobj1.value);\n  var maxlengthString = JSON.stringify(this.testjQueryobj1.maxlength);\n  var rowsString = JSON.stringify(this.testjQueryobj1.rows);\n\n  //check length of string\n  var labelLength = labelString.length;\n  var descriptionLength = descriptionString.length;\n  var placeholderLength = placeholderString.length;\n  var classNameLength = classNameString.length;\n  var nameLength = nameString.length;\n  var valueLength = valueString.length;\n  var maxlengthLength = maxlengthString.length;\n  var rowsLength = rowsString.length;\n\n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got name string\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    nameString = nameString.slice(1,-1);\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties[\"\"] = {\n      \"type\": \"object\",\n      \"properties\" : {\n        \"textarea\":{\n          \"type\": \"string\",\n          \"title\": this.testjQueryobj1.label,\n          \"default\": this.testjQueryobj1.placeholder,\n          \"maxLength\" : this.testjQueryobj1.maxlength\n        }\n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      } \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"textarea\":\n    console.log(\"subtype is textarea\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textarea\"}\n      }\n     \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Label\", labelString);\n  }\n  //mapping for description\n  if(descriptionLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Description\", descriptionString);\n    descriptionString = descriptionString.slice(1,-1);\n    //this.testNewObj.uiSchema[nameString][\"ui:description\"] = descriptionString;\n    \n  }\n  //mapping for placeholder\n  if(placeholderLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Placeholder\", placeholderString);\n  }\n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Class name\", classNameString);\n    classNameString = classNameString.slice(1,-1);\n    this.testNewObj.uiSchema[nameString][\"classNames:\"] = classNameString;\n  }\n  \n\n  //mapping for value\n  if(valueLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Value\", valueString);\n    //valueString = valueString.slice(1,-1);\n    this.testNewObj.formData = {[nameString] :  this.testjQueryobj1.value} \n  }\n  //mapping for max length\n  if(maxlengthLength <= 2 && null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Max length\", maxlengthString);\n  }\n  if(rowsLength <= 2 && null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"rows\", rowsString);\n    this.testNewObj.uiSchema[nameString][\"ui:options\"] = {\n      \"rows\" : rowsString\n    } \n    \n  }\n\n  this.testNewObj.formData = {\n    [nameString] :  this.testjQueryobj1.value\n  } \n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj);\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    formData={this.testjQueryobj1.formData}\n    children={true}\n  ></Form>),document.getElementById(\"root2\"));\n}\n\n  render(){ return (<div><h1></h1></div>)}\n\n  \n\n}\n\n\n\nexport default TextareaC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass ParagraphC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"paragraph\",\n    \"subtype\": \"p\",\n    \"label\": \"Paragraph content\",\n    \"className\": \"1\",\n    \"access\": false,\n    \"role\": \"1\"\n  }\n  \n  //Paragraph is the equivalent to description\n  /*\n    Things adjusted:\n      label mapped to \"description\"\n      class name mapped directly to ui schema\n    Things omitted:\n    type paragraph is used to display text\n      Subtype was used to change display style\n      access\n      role\n  */\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{},\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  \n  //mapping for type\n  if(this.testjQueryobj1.type === \"paragraph\"){\n    console.log(\"Check for correct type\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  \n\n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Label\", labelString);\n    \n    if (labelString != null && labelString.length < 1) {\n      labelString = labelString.slice(1,-1);\n      labelString = labelString.slice(1,-1)\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = labelString.slice(1,-1)\n    this.testNewObj.jsonSchema = { \n      \"description\" : labelString,\n      \"type\" : \"object\" \n  }\n}\n  \n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Class name\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema[\"classNames\"] = classNameString;\n  }\n  \n \n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    children={true}\n    \n    >\n  </Form>),document.getElementById(\"rooty7\"));\n}\n\n\n\n  render(){\n    return ( \n    <div>\n      <h1>{this.props.title}</h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\n\nexport default ParagraphC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass NumberC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"number\",\n    \"required\": true,\n    \"label\": \"1\",\n    \"description\": \"2\",\n    \"placeholder\": \"3\",\n    \"className\": \"form-control\",\n    \"name\": \"number-1594898518968\",\n    \"access\": true,\n    \"value\": \"5\",\n    \"min\": 5,\n    \"max\": 6,\n    \"step\": 7,\n    \"role\": \"1\"\n  }\n  \n  //type and rows are unique to text area compared to text field\n  /*\n    Things adjusted:\n    type > number(Jquery) > integer(JSON)\n    min - jsonschema [namestring] \"minimum\"\n    max - json schema [namestring] \"maximum\"\n    step - json schema [namestring] \"multipleOf\"\n    Things omitted:\n    subtype, role, access\n    integer for json schema\n  */\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  //mapping for type\n  if(this.testjQueryobj1.type === \"number\"){\n    console.log(\"Check for correct type\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var descriptionString = JSON.stringify(this.testjQueryobj1.description);\n  var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  var valueString = JSON.stringify(this.testjQueryobj1.value);\n\n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (descriptionString != null && descriptionString.length < 1) {\n    var descriptionLength = descriptionString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (placeholderString != null && placeholderString.length < 1) {\n    var placeholderLength = placeholderString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (valueString != null && valueString.length < 1) {\n    var valueLength = valueString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got name string\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": this.testjQueryobj1.type,\n        \"title\": this.testjQueryobj1.label,\n        //\"default\": this.testjQueryobj1.placeholder\n      }\n    } \n  }\n\n  \n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Label\", labelString);\n  }\n  //mapping for description\n  if(descriptionLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Description\", descriptionString);\n    \n    if (descriptionString != null && descriptionString.length < 1) {\n      descriptionString = descriptionString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema = { \n      [nameString] : {\"ui:description\": descriptionString }\n  }\n  }\n  //mapping for placeholder\n  if(placeholderLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Placeholder\", placeholderString);\n  }\n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Class name\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema[nameString][\"classNames:\"] = classNameString;\n  }\n\n  //mapping for value\n  if(valueLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Value\", valueString);\n    //valueString = valueString.slice(1,-1);\n    this.testNewObj.formData = {\n      [nameString] :  this.testjQueryobj1.value\n    } \n  }\n\n  \n  //mapping for min, max,step\n  this.testNewObj.jsonSchema.properties[nameString] = {\n    \"maximum\" : this.testjQueryobj1.max,\n    \"minimum\" : this.testjQueryobj1.min,\n    \"multipleOf\" : this.testjQueryobj1.step,\n    \"title\": this.testjQueryobj1.label,\n    \"type\" : \"integer\",\n    \"default\": Number(placeholderString)\n  }\n  \n  //mapping for UISchema\n  this.testNewObj.uiSchema[nameString] = {\n    \"ui:widget\": \"updown\"\n  }\n\n \n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    formData={this.testNewObj.formData}\n    children={true}>\n  </Form>),document.getElementById(\"rooty9\"));\n}\n\n\n\n  render(){\n    return ( \n    <div>\n      <h1>{this.props.title}</h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\n\nexport default NumberC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass HiddeninputC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"hidden\",\n    \"name\": \"hidden-1594907934428\",\n    \"value\": \"1\",\n    \"access\": true,\n    \"role\": \"1\"\n  }\n  \n\n  /*\n  Things adjusted:\n    type > hidden(Jquery) > disabled(JSON)\n    name mapped to object name and default text\n    Things omitted:\n    role, access\n   \n  */\n\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  //mapping for type\n  if(this.testjQueryobj1.type === \"hidden\"){\n    console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  \n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  var valueString = JSON.stringify(this.testjQueryobj1.value);\n  \n  \n  //check length of string\n  \n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (valueString != null && valueString.length < 1) {\n    var valueLength = valueString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n\n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": this.testjQueryobj1.type\n        \n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      } \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  \n  \n  \n\n  //mapping for value\n  if(valueLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", valueString);\n    //valueString = valueString.slice(1,-1);\n    this.testNewObj.formData = {\n      [nameString] :  this.testjQueryobj1.value\n    } \n  }\n  \n  //map UIschema\n  this.testNewObj.uiSchema[nameString] = {\n    \"ui:disabled\": true\n  }\n\n  //map formdata\n  this.testNewObj.formData[nameString] = nameString;\n\n  //map JSONSchema\n  this.testNewObj.jsonSchema.properties[nameString] = {\n      \"type\": \"string\",\n      \n  }\n\n  //children = {true} hides the submit button\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    formData={this.testNewObj.formData}\n    children={true}>\n  </Form>),document.getElementById(\"rooty10\"));\n}\n\n\n\n  render(){\n    return ( \n    <div>\n      <h1>{this.props.title}</h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\n\nexport default HiddeninputC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass HeaderC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"header\",\n    \"subtype\": \"h1\",\n    \"label\": \"Header\",\n    \"className\": \"1\",\n    \"access\": true,\n    \"role\": \"1\"\n  }\n  \n\n  /*\n  Things adjusted:\n    type > label(Jquery) > title(JSON)\n    name mapped to object name and default text\n    Things omitted:\n    role, access\n    subtype - size of text (atm)\n\n    unsure whether if needs a name or not - using class name temporarily \n  */\n\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  //mapping for type\n  if(this.testjQueryobj1.type === \"header\"){\n    console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.className);\n  \n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n \n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": \"string\",\n        \"title\": this.testjQueryobj1.label\n      \n      }\n    } \n  }\n\n  \n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  \n  \n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.jsonSchema = {\n      \"title\" : this.testjQueryobj1.label,\n      \"type\" : \"object\"\n    }\n  }\n  \n\n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    children={true}\n    >\n  </Form>),document.getElementById(\"rooty6\"));\n}\n\n\n\n  render(){\n    return ( \n    <div>\n      <h1>{this.props.title}</h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\n\nexport default HeaderC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass FileuploadC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"file\",\n    \"required\": false,\n    \"label\": \"File Upload\",\n    \"description\": \"1\",\n    \"placeholder\": \"2\",\n    \"className\": \"form-control\",\n    \"name\": \"file-1594911845425\",\n    \"access\": true,\n    \"subtype\": \"file\",\n    \"multiple\": false,\n    \"role\": \"1\"\n  }\n  \n\n  /*\n  Things adjusted:\n    subtype - JSONschema [namestring] type string, format data-url, title label\n    \n    description - uischema [namestring] \"ui:help\": \"Hint: Make it strong!\"\n    Things omitted:\n    role, access, multiple(decision for single file upload)\n\n    Things unsure at the moment:\n    jquery form builder which object to select when file is uploaded\n    \n  */\n\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  //mapping for type\n  if(this.testjQueryobj1.type === \"file\"){\n    console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var descriptionString = JSON.stringify(this.testjQueryobj1.description);\n  var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  \n  \n  \n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (descriptionString != null && descriptionString.length < 1) {\n    var descriptionLength = descriptionString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (placeholderString != null && placeholderString.length < 1) {\n    var placeholderLength = placeholderString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  \n\n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": this.testjQueryobj1.type,\n        \"title\": this.testjQueryobj1.label,\n        \"default\": this.testjQueryobj1.placeholder\n    \n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      } \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  //mapping for description\n  if(descriptionLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", descriptionString);\n    \n    if (descriptionString != null && descriptionString.length < 1) {\n      descriptionString = descriptionString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema[nameString] = {\n      \"ui:description\" : descriptionString\n    }\n  }\n  //mapping for placeholder\n  if(placeholderLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", placeholderString);\n  }\n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema[nameString] = {\n      \"ui:options\": {\n        \"accept\": \".json\",\n        \"classNames:\" : classNameString\n      }\n    }\n  }\n\n  //map jsonschema\n  this.testNewObj.jsonSchema.properties[nameString] = {\n    \"type\" : \"string\",\n    \"format\" : \"data-url\",\n    \"title\" : this.testjQueryobj1.label\n  }\n\n  \n  \n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    formData={this.testNewObj.formData}\n    children={true}>\n  \n  </Form>),document.getElementById(\"rooty5\"));\n}\n\n\n\n  render(){\n    return ( \n    <div>\n      <h1>{this.props.title}</h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\n\nexport default FileuploadC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass DatefieldC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"date\",\n    \"required\": false,\n    \"label\": \"Date Field\",\n    \"description\": \"1\",\n    \"placeholder\": \"2\",\n    \"className\": \"form-control\",\n    \"name\": \"date-1594913896616\",\n    \"access\": true,\n    \"value\": \"2020-07-20\",\n    \"role\": \"1\"\n  }\n  \n\n  /*\n  Things adjusted:\n    value is the target object mapped to \"native\" properties [namestring]\n    value stored to formdata \"native\" [namestring]\n    \n    Things omitted:\n    role, access\n\n    Things unsure at the moment:\n    what exactly is native?\n  */\n\n  testJSONSchemaobj = \n    {\n        \"jsonSchema\": {\n            \"required\":[\n              \"firstname\"\n            ],\n            \"properties\": {\n                \"firstName\": {\n                  \"type\": \"string\",\n                  \"title\": \"First name\",\n                  \"default\": \"Chuck\"\n                }\n            }\n        },\n        \"uiSchema\": {\n            \"firstName\": {\n              \"ui:autofocus\": true,\n              \"ui:emptyValue\": \"\",\n              \"ui:autocomplete\": \"family-name\",\n              \"ui:widget\": \"password\"\n            }\n        },\n        \"formData\": {\n            \"firstName\": \"Chuck\",\n        }\n    }\n    \n\ntestNewObj = {\n  \"jsonSchema\":{\n    \"required\":[],\n    \"properties\":{\n    \"\" :{\n      \"properties\": {}\n    }\n  }\n},\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n\n  //mapping for type\n  if(this.testjQueryobj1.type === \"date\"){\n    console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  var descriptionString = JSON.stringify(this.testjQueryobj1.description);\n  var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  var valueString = JSON.stringify(this.testjQueryobj1.value);\n  \n  \n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (descriptionString != null && descriptionString.length < 1) {\n    var descriptionLength = descriptionString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (placeholderString != null && placeholderString.length < 1) {\n    var placeholderLength = placeholderString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (valueString != null && valueString.length < 1) {\n    var valueLength = valueString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n\n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n   \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties[\"\"].properties = {\n      [nameString] : {\n        \"type\": \"string\",\n        \"title\": this.testjQueryobj1.label,\n        \"default\": this.testjQueryobj1.placeholder,\n        \"format\" : \"date\"\n       \n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      } \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[\"native\"].properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  //mapping for description\n  if(descriptionLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", descriptionString);\n    \n    if (descriptionString != null && descriptionString.length < 1) {\n      descriptionString = descriptionString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    //this.testNewObj.uiSchema[nameString][\"ui:description\"] = descriptionString;\n    \n  }\n  //mapping for placeholder\n  if(placeholderLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", placeholderString);\n  }\n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    //this.testNewObj.uiSchema[nameString][\"classNames:\"] = classNameString;\n  }\n  \n\n  //mapping for value\n  if(valueLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", valueString);\n    \n   }\n   this.testNewObj.formData[\"native\"] = {\n     \"date\": \"2020-08-12\"\n   }\n  \n  \n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    formData={this.testNewObj.formData}\n    children={true}>\n  </Form>),document.getElementById(\"rooty4\"));\n}\n  render(){return ( <div><h1></h1></div>)}\n\n}\n\n\n\nexport default DatefieldC;","import React, { Component, createRef, createContext } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass SelectC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"select\",\n    \"required\": true,\n    \"label\": \"Select\",\n    \"description\": \"nigel\",\n    \"placeholder\": \"shoh\",\n    \"className\": \"form-control\",\n    \"name\": \"select-1596073960846\",\n    \"access\": false,\n    \"multiple\": false,\n    \"values\": [\n      {\n        \"label\": \"Option 1\",\n        \"value\": \"option-1\",\n        \"selected\": true\n      },\n      {\n        \"label\": \"Option 2\",\n        \"value\": \"option-2\"\n      },\n      {\n        \"label\": \"Option 3\",\n        \"value\": \"option-3\"\n      }\n    ]\n  }\n  \n\n  /*\n  Things adjusted:\n    Select box maps to 2 different styles determined by multiple (wrt to \"errors\" & \"large\")\n    multiple > false > large  > enum defines the list contents \n    multiple > true  > errors > multiplechoiceList\n    values\n\n    definitions\n\n    Things omitted:\n    role, access\n    description, placeholder, subtype, maxlength,rows, value\n\n    Things unsure at the moment:\n    **enum** large enum the object name was hard coded\n  */\n    \ntestNewObj =  {\n  \"jsonSchema\":{\n    \"definitions\":{},\n    \"type\": \"object\",\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\nftestnewobj = {\n  \"jsonSchema\":{\n    \"definitions\": {\n      \"largeEnum\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"option #0\",\n          \"option #1\",\n          \"option #2\"\n        ]\n      }\n    },\n    \"type\": \"object\",\n    \"properties\": {\n      \"choice1\": {\n        \"$ref\": \"#/definitions/largeEnum\"\n      }\n    }\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  //console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  \n  /*\n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n  */\n\n\n  //mapping for type\n  if(this.testjQueryobj1.type === \"select\"){\n    console.log(\"Can identify select\");\n  } else {\n    console.log(\"Cannot identify select\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  //var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  \n  //check length of string\n \n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  //var placeholderLength = placeholderString.length;\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    nameString = nameString.slice(1,-1);\n    labelString = this.testjQueryobj1.label;\n    // this.testNewObj.jsonSchema.properties = {\n    //   [nameString] : {\n    //     \"type\": \"string\",\n    //     \"title\": this.testjQueryobj1.label\n        \n    //   }\n    // } \n    this.testNewObj.jsonSchema.properties = {\n      [labelString] : {\n        \"$ref\": \"#/definitions/largeEnum\"\n      }\n    }\n  \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = { [nameString] : {\"ui:widget\": \"textfield\"}} \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {[nameString] : {\"ui:widget\": \"password\"}} \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {[nameString] : {\"ui:widget\": \"telephone\"}} \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  \n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    classNameString = classNameString.slice(1,-1);\n    //this.testNewObj.uiSchema[nameString] = { \"classNames:\" : classNameString}\n  }\n\n  //print values array\n  //console.log(\"contents of values\", this.testjQueryobj1.values);\n  //console.log(\"contents of values[0]\", this.testjQueryobj1.values[0]);\n  //console.log(\"contents of values[1]\", this.testjQueryobj1.values[1]);\n  \n  //count number of arrays to populate enum\n  var numberOfArrays = this.testjQueryobj1.values.length;\n  console.log(\"Number of arrays\", numberOfArrays);\n\n  //map choice bar\n  //this.testNewObj.jsonSchema.properties = {\"choice1\" : {\"$ref\": \"#/definitions/largeEnum\"}}\n\n  //check which is selected\n  var i = 0;\n  //create an array\n  var bb = []\n  var cc = []\n  var dd = []\n  var teststorage = [];\n  //check if multiple accepted\n  if(this.testjQueryobj1.multiple === false){\n  //run when multiple is false\n  // run for as many number of arrays there are\n  for (i = 0; i < numberOfArrays; i++){\n    console.log(\"contents of of the array\", this.testjQueryobj1.values[i]);\n    //populate array\n    \n    \n\n    teststorage[i] = this.testjQueryobj1.values[i][\"value\"]\n    console.log(\"Contents of test storage\", teststorage)\n\n    this.testNewObj.jsonSchema.definitions = {\n      \"largeEnum\" : {\n        \"type\": \"string\",\n        \"enum\": teststorage\n      }\n    }\n\n    //check for selected in all array\n    if(this.testjQueryobj1.values[i][\"selected\"] === true){\n      console.log(\"this is selected\")\n      //save selected to formdata\n      //this.testNewObj.formData = {\"choice1\": this.testjQueryobj1.values[i].label}\n    } else {\n      console.log(\"This is not selected\")\n    }\n    \n  }\n} else {\n// run when multiple is true\nfor (i = 0; i < numberOfArrays; i++){\n  console.log(\"contents of of the array\", this.testjQueryobj1.values[i]);\n  this.testNewObj.jsonSchema.properties[nameString] = {\n    [nameString] : {\n      \"type\": \"string\",\n      \"uniqueItems\": true,\n      \"title\": this.testjQueryobj1.label,\n      \"examples\" : this.testjQueryobj1.values[i]\n    }\n  } \n  //check for selected in all array\n  if(this.testjQueryobj1.values[i][\"selected\"] === true){\n    console.log(\"this is selected\")\n    //save selected to formdata\n    this.testNewObj.formData.multipleChoicesList[i] = this.testjQueryobj1.values[i];\n      \n    \n  } else {\n    console.log(\"This is not selected\")\n  }\n}\n} \n  //map UIschema\n  //this.testNewObj.uiSchema[\"choice1\"] = {\"ui:placeholder\": this.testjQueryobj1.placeholder}\n\nthis.testNewObj.uiSchema =  { \n  \"Select\": {\n    \"ui:placeholder\": \"Choose one\"\n  }\n}\n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    children={true}>\n  </Form>),document.getElementById(\"rooty11\"));\n}\n\n  render(){return ( <div> <h1>{this.props.title}</h1></div>)}\n\n}\n\n\n\nexport default SelectC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass RadioC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"radio-group\",\n    \"required\": false,\n    \"label\": \"Radio Group\",\n    \"description\": \"nigel\",\n    \"inline\": false,\n    \"className\": \"shoh\",\n    \"name\": \"radio-group-1596075059354\",\n    \"access\": false,\n    \"other\": false,\n    \"values\": [\n      {\n        \"label\": \"Option 1\",\n        \"value\": \"option-1\"\n      },\n      {\n        \"label\": \"Option 2\",\n        \"value\": \"option-2\"\n      },\n      {\n        \"label\": \"Option 3\",\n        \"value\": \"option-3\"\n      }\n    ]\n  }\n  \n\n  /*\n  Things adjusted:\n    label > jsonschema > properties > [nameString] > title\n    inline > UIschema [nameString] > ui widgets + options\n\n    Things omitted:\n    role, access, placeholder, other(not sure atm)\n\n    Things unsure at the moment:\n    line 230 why is one valid why is the other invalid?\n  */\n    \ntestNewObj =  {\n  \"jsonSchema\":{\n    \"type\": \"object\",\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{}\n}\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  //console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  \n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n\n  //mapping for type\n  if(this.testjQueryobj1.type === \"radio-group\"){\n    //console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  //var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  \n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  //var placeholderLength = placeholderString.length;\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": this.testjQueryobj1.type,\n        \"title\": this.testjQueryobj1.label\n        \n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      } \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  \n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema[nameString] = { \n      \"classNames:\" : classNameString\n    }\n  }\n\n  \n  //count number of arrays to populate enum\n  var numberOfArrays = this.testjQueryobj1.values.length;\n  console.log(\"Number of arrays\", numberOfArrays);\n\n  //map choice bar\n \n\n  //check which is selected\n  var i = 0;\n  var bb = []\n  var cc = []\n  var dd = []\n  var teststorage = [];\n  // run for as many number of arrays there are\n  for (i = 0; i < numberOfArrays; i++){\n    console.log(\"contents of of the array\", this.testjQueryobj1.values[i]);\n    bb = Object.values( this.testjQueryobj1.values[i])\n    console.log(\"content of bb is\", bb[i])\n    console.log(typeof bb)\n    cc = bb[i]\n    console.log(\"values of cc\", cc)\n    console.log(typeof cc)\n    cc = [\"Saab\", \"Volvo\", \"BMW\"];\n    console.log(typeof cc)\n    dd[i] = bb[i]\n\n    teststorage[i] = this.testjQueryobj1.values[i][\"value\"]\n    console.log(\"Contents of test storage\", teststorage)\n\n    this.testNewObj.jsonSchema.properties[nameString] = {\n      \"type\": \"number\",\n      \"title\": this.testjQueryobj1.label,\n      \"enum\": teststorage\n    }\n    //this.testNewObj.jsonSchema.properties.EnumRadio.enum[i] = this.testjQueryobj1.values[i];\n    \n    //check for selected in all array\n    if(this.testjQueryobj1.values[i][\"selected\"] === true){\n      console.log(\"this is selected\")\n      //save selected to formdata\n      //sthis.testNewObj.formData = {\"choice1\": this.testjQueryobj1.values[i].label}\n    } else {\n      console.log(\"This is not selected\")\n    }\n  }\n\n  //map uischema\n  this.testNewObj.uiSchema[nameString] = {\n    \"ui:widget\": \"radio\",\n    \"ui:options\": {\n      \"inline\": this.testjQueryobj1.inline\n    }\n  }\n\n  //map jsonschema label\n  //this.testNewObj.jsonSchema.properties[nameString]= {\"title\" : this.testjQueryobj1.label}\n\n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    children={true}\n    >\n  </Form>),document.getElementById(\"rooty3\"));\n}\n\n  render(){\n    return ( \n    <div>\n      <h1></h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\nexport default RadioC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\n//ideal to only have one tag in a single class\n//props is automatically avaliable\n//Class enables useState() and other additional states\n//states work from out side and prop alters from the inside?? look this up soon\nclass CheckboxgroupC extends Component {\n  \n  testjQueryobj1 = \n  {\n    \"type\": \"checkbox-group\",\n    \"required\": true,\n    \"label\": \"Checkbox Group\",\n    \"description\": \"1\",\n    \"toggle\": true,\n    \"inline\": true,\n    \"className\": \"2\",\n    \"name\": \"checkbox-group-1594958824228\",\n    \"access\": false,\n    \"other\": true,\n    \"role\": \"1\",\n    \"values\": [\n      {\n        \"label\": \"Option 1\",\n        \"value\": \"option-1\",\n        \"selected\": true\n      },\n      {\n        \"label\": \"option 2\",\n        \"value\": \"option-2\",\n        \"selected\": true\n      }\n    ]\n  }\n  \n\n  /*\n  Things adjusted:\n    label > jsonschema > properties > [nameString] > title\n    inline > UIschema [nameString] > ui widgets + options\n    ui widget - Uischema > [namestring] > checkboxes \n    toggle??\n\n    Things omitted:\n    role, access, placeholder, other(not sure atm)\n\n    Things unsure at the moment:\n    line 230 why is one valid why is the other invalid?\n  */\n    \ntestNewObj =  {\n  \"jsonSchema\":{\n    \"type\": \"object\",\n    \"properties\": {}\n  },\n  \"uiSchema\":{},\n  \"formData\":{\n    \"multipleChoicesList\": []\n  }\n}\n\n\n\n//select the object name \n//\n// supposed check if its type is \"text\"\n//  if (testjQueryobj1.type == \"text\")\n//    testJSONSchemaobj1.jsonSchema.firstName.type = \"string\"\n\nconstructor(props){\n  super();\n  //console.log = function() {}\n  //console.log(\"Content of testJQuery\", this.testjQueryobj1);\n  \n  var newOtherclassObject = sessionStorage.getItem(\"newObjCreated\")\n  console.log(\"content of newotherclassobject\", newOtherclassObject)\n\n  var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n  console.log(\"testitem in class text field\" , testitem)\n  //overide the old newobjcreated\n  newOtherclassObject = testitem\n\n  console.log(typeof newOtherclassObject)\n  newOtherclassObject = JSON.stringify(newOtherclassObject)\n  console.log(\"string content of newotherclassobject\", newOtherclassObject)\n  if(sessionStorage != null){\n    console.log(\"Got thing\")\n    newOtherclassObject = JSON.parse(newOtherclassObject)\n    console.log(\"the new content of newotherclassobj\", newOtherclassObject)\n    this.testjQueryobj1 = newOtherclassObject;\n    console.log(\"content of testjquery\", this.testjQueryobj1)\n    console.log(typeof this.testjQueryobj1)\n    this.testjQueryobj1 = JSON.parse(this.testjQueryobj1)\n    console.log(\"value of type\", this.testjQueryobj1.type )\n  } else {\n    console.log(\"Got nothing\")\n  }\n\n  //mapping for type\n  if(this.testjQueryobj1.type === \"checkbox-group\"){\n    //console.log(\"It works\",this.testjQueryobj1);\n  } else {\n    console.log(\"not working\")\n  }\n\n  //keys can be \"active\" but empty\n  //convert content of keys to string\n  var labelString = JSON.stringify(this.testjQueryobj1.label);\n  //var placeholderString = JSON.stringify(this.testjQueryobj1.placeholder);\n  var classNameString = JSON.stringify(this.testjQueryobj1.className);\n  var nameString = JSON.stringify(this.testjQueryobj1.name);\n  \n  //check length of string\n  if (labelString != null && labelString.length < 1) {\n    var labelLength = labelString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  //var placeholderLength = placeholderString.length;\n  if (classNameString != null && classNameString.length < 1) {\n    var classNameLength = classNameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  if (nameString != null && nameString.length < 1) {\n    var nameLength = nameString.length;\n    console.log(\"this is being executed\")\n  } else {}\n  \n  //mapping for name( At the top, used as the unique identifier )\n  if(nameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", nameString);\n    \n    //works at adding new key pairs\n    //var namestringinstring = JSON.parse(nameString);\n    //this.testNewObj.jsonSchema.properties = { namestringinstring };\n    \n    //rename key name( doesnt change the object name)\n    //this.testNewObj.jsonSchema.properties.nameString =  this.testNewObj.jsonSchema.properties.nametobereplaced;\n    //delete this.testNewObj.jsonSchema.properties.nametobereplaced;\n\n    //change it in the form of string replace\n    //change object to string \n    console.log(\"content of test new obj\", this.testNewObj);\n    \n    if (nameString != null && nameString.length < 1) {\n      nameString = nameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    labelString = this.testjQueryobj1.label;\n    this.testNewObj.jsonSchema.properties = {\n      [nameString] : {\n        \"type\": this.testjQueryobj1.type,\n        \"title\": this.testjQueryobj1.label\n        \n      }\n    } \n  }\n\n  //mapping for subtype\n  switch(this.testjQueryobj1.subtype){\n    case \"textfield\":\n      console.log(\"subtype is textfield\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"textfield\"}\n      } \n      //Below method works in adding object to object as well\n      //this.testNewObj.uiSchema[nameString][\"ui:emptyValue\"] = \"\";\n    break;\n    case \"password\":\n      console.log(\"subtype is password\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      } \n    break;\n    case \"email\":\n      //appears under widget - of JSONSchema object\n      console.log(\"subtype is email\");\n      this.testNewObj.jsonSchema.properties[nameString][\"format\"] = \"email\";\n    break;\n    case \"color\":\n    /* no corresponding value in jsonschema \n    console.log(\"subtype is color\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"password\"}\n      }\n    */ \n    break;\n    case \"tel\":\n      console.log(\"subtype is tel\");\n      this.testNewObj.uiSchema = {\n        [nameString] : {\"ui:widget\": \"telephone\"}\n      } \n    break;\n  }\n\n  //mapping for required\n  if(this.testjQueryobj1.required === true){\n    this.testNewObj.jsonSchema.required = [ nameString ];\n    //console.log(\"hello\",this.testNewObj.jsonSchema.required);\n  } else {\n    //occurs when false\n    console.log(\"field not required\");\n  }\n\n  //if string length less then or equal to 2 means no value, 2 to account for double quotation\n  //mapping for label \n  if(labelLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", labelString);\n  }\n  \n  //mapping for className\n  if(classNameLength <= 2 || null){ /*occurs if string is \"\" */ return 0; } \n  else { //occurs if string has \"content\"\n    console.log(\"Got value\", classNameString);\n    \n    if (classNameString != null && classNameString.length < 1) {\n      classNameString = classNameString.slice(1,-1);\n      console.log(\"this is being executed\")\n    } else {}\n    this.testNewObj.uiSchema[nameString] = { \n      \"ui:widget\": \"checkboxes\"\n    }\n  }\n\n  //print values array\n  //console.log(\"contents of values\", this.testjQueryobj1.values);\n  //console.log(\"contents of values[0]\", this.testjQueryobj1.values[0]);\n  //console.log(\"contents of values[1]\", this.testjQueryobj1.values[1]);\n  \n  //count number of arrays to populate enum\n  var numberOfArrays = this.testjQueryobj1.values.length;\n  console.log(\"Number of arrays\", numberOfArrays);\n\n  //map choice bar\n  \n\n  //check which is selected\n  var i = 0;\n  var cc = new Array();\n  //var bb is use to hold the object value individually\n  var bb = []\n  var dd = []\n  var teststorage = [];\n  // run for as many number of arrays there are\n  for (i = 0; i < numberOfArrays; i++){\n    var aa = new Array();\n    console.log(\"contents of of the array\", this.testjQueryobj1.values[i]);\n    bb = Object.values( this.testjQueryobj1.values[i])\n    console.log(\"content of bb is\", bb[i])\n    console.log(typeof bb)\n    cc = bb[i]\n    console.log(\"values of cc\", cc)\n    console.log(typeof cc)\n    cc = [\"Saab\", \"Volvo\", \"BMW\"];\n    console.log(typeof cc)\n    dd[i] = bb[i]\n    \n    teststorage[i] = this.testjQueryobj1.values[i][\"value\"]\n    console.log(\"Contents of test storage\", teststorage)\n\n    this.testNewObj.jsonSchema.properties[nameString] = {\n      \"type\" : \"array\",\n      \"title\" : this.testjQueryobj1.label,\n      \"items\" : {\n        \"type\" : \"string\",\n        \"enum\" : teststorage\n      },\n      \"uniqueItems\" : true\n\n    } \n    //this.testNewObj.jsonSchema.properties.EnumRadio.enum[i] = this.testjQueryobj1.values[i];\n    \n    //check for selected in all array\n    if(this.testjQueryobj1.values[i][\"selected\"] === true){\n      console.log(\"this is selected\")\n      //this.testNewObj.formData.multipleChoicesList[i] = this.testjQueryobj1.values[i];\n      \n      //save selected to formdata\n      this.testNewObj.formData.multipleChoicesList[i] = this.testjQueryobj1.values[i];\n    } else {\n      console.log(\"This is not selected\")\n    }\n  }\n\n  //map uischema\n  /*\n  this.testNewObj.uiSchema[nameString] = {\n    \"ui:widget\": \"checkboxes\",\n    \"ui:options\": {\n      \"inline\": this.testjQueryobj1.inline}\n  }*/\n\n  //map jsonschema label\n \n\n  /* no direct equalivant \n        \"access\": true,\n        \"role\": \"1\"\n  */\n  console.log(\"Content of newobj\", this.testNewObj)\n  render((<Form \n    schema={this.testNewObj.jsonSchema}\n    uiSchema={this.testNewObj.uiSchema}\n    children={true}\n    >\n  </Form>),document.getElementById(\"rooty6\"));\n}\n\n  render(){\n    return ( \n    <div>\n      <h1>{this.props.title}</h1>\n      \n    </div>\n    )\n  }\n\n}\n\n\nexport default CheckboxgroupC;","import React, { Component, createRef } from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport { render } from \"@testing-library/react\";\n\nimport TextareaC from \"./TextareaC\";\nimport TextfieldC from \"./TextfieldC\";\nimport ParagraphC from \"./ParagraphC\";\nimport NumberC from \"./NumberC\";\nimport HiddeninputC from \"./HiddeninputC\";\nimport HeaderC from \"./HeaderC\";\nimport FileuploadC from \"./FileuploadC\";\nimport DatefieldC from \"./DatefieldC\";\nimport CheckboxgroupC from \"./CheckboxgroupC\";\nimport RadioC from \"./RadioC\";\nimport SelectC from \"./SelectC\";\n\nimport $ from \"jquery\";\n\nclass Demoready extends Component {\n    state = {\n        name: \"Please enter jQuery form builder output\"\n     }\n\n     $ = window.$;\n\n     storetype = \"\";\n     storecount = \"\";\n     storeobj = {};\n\n     extrastoreobj = \"\";\n\n     noa = \"\";\n\n     handleChange = event => {\n            \n            console.log(event.target.value)\n            this.setState({ name: event.target.value })\n            var newObjCreated = event.target.value\n            console.log(\"content of newObjCreated:\", newObjCreated)\n            console.log(typeof newObjCreated)\n\n            //Session storage is being used to pass the object over\n            sessionStorage.setItem(\"newObjCreated\", newObjCreated)\n            //newObjCreated = sessionStorage.getItem(\"newObjCreated\")\n            //console.log(\"content of newObjCreated after sessionstorage\", newObjCreated)\n         \n        \n            console.log(\"value of type\", Object.values(newObjCreated)) \n            //branch another object to manipulate\n            var extraobj = event.target.value\n            console.log(\"content of extraobj\", extraobj)\n            this.storeobj = Object.assign(extraobj)\n            console.log(\"content of storeobj\", this.storeobj)\n            console.log(typeof this.storeobj)\n            //This portion adds on the extra brackets\n            var str1 = \"[\";\n            var str2 = \"]\";\n            extraobj = str1.concat(extraobj,str2)\n            console.log(\"extraobj after concat\", extraobj)\n        \n            var testjsonstring2 = sessionStorage.getItem(\"getjsonstring\")\n            console.log(\"content of testjsonstring\", testjsonstring2)\n            //Pull string from index.js getjson event listener\n            //var getjsonstring = sessionStorage.getItem(\"getjsonstring\")\n            //console.log(\"content of getjsonstring after event\", getjsonstring)\n        \n            //replace extraobj with the getjson content\n            //extraobj = getjsonstring\n         //extraobj gets thrown to the other classes further down at new extraobj \n         extraobj = JSON.parse(extraobj)\n         console.log(\"extraobj\", extraobj)\n         //catch number of arrays\n         var totalnumberOfArrays = extraobj.length\n         console.log(\"length\",totalnumberOfArrays )\n         var totalcount = totalnumberOfArrays\n         this.storecount = totalcount\n         console.log(\"Setting the storecount pointer\",this.storecount)\n         //newextraobject\n         var newextraobj = extraobj\n         this.extrastoreobj = newextraobj\n         for (let index0 = 0; index0 < totalcount; index0++) {\n             console.log(\"Loop number:\",index0)\n             console.log(\"Content of array\",extraobj[index0] )\n             \n         }\n         //this.noa =  Number.value(totalnumberOfArrays)\n         //console.log(\"total Number of arrays\", totalnumberOfArrays);\n         //below is not occuring\n         newObjCreated = JSON.parse(newObjCreated)\n         console.log(\"content of newobjcreated\", newObjCreated.type)\n         \n         //clearly works\n         this.storetype = newObjCreated.type\n        \n         \n        \n     }\n\n     submitbutton = event =>{\n        $(\"form\").remove(\".rjsf\");\n        console.log(\"storecount got passed over from handle change\", this.storecount)\n        for (let index1 = 0; index1 < this.storecount; index1++) {\n            console.log(\"this is round number:\",index1)\n            console.log(\"this is round number content:\", this.extrastoreobj[index1])\n            console.log(\"this is round number content type:\", this.extrastoreobj[index1][\"type\"])\n            //sessionStorage.setItem(\"newObjCreated\", this.extrastoreobj[index1])\n            //need to be in string format to setitem\n            var extrastoreobjstring = JSON.stringify(this.extrastoreobj[index1])\n            //extrastoreobjstring = JSON.parse(extrastoreobjstring)\n            console.log(\"extrastoreobjstring\" ,extrastoreobjstring)\n            sessionStorage.setItem(\"extranewObjCreated\", extrastoreobjstring )\n            var testitem = sessionStorage.getItem(\"extranewObjCreated\")\n            console.log(\"testitem\" , testitem)\n\n\n            //this.storetype = this.extrastoreobj[index1][\"type\"]\n            this.storetype = this.extrastoreobj[index1][\"type\"]\n            \n            if (this.storetype === \"textarea\"){\n                console.log(\"it is text area\")\n                render(( <div ><TextareaC/></div>), document.getElementById(\"root3\"));\n            }\n        else if(this.storetype === \"text\") {\n                console.log(\"it is text field\")\n                render(( <div><TextfieldC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"paragraph\") {\n                console.log(\"it is paragraph\")\n                render(( <div><ParagraphC /></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"number\") {\n            console.log(\"it is number\")\n            render(( <div><NumberC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"hidden\") {\n            console.log(\"it is hidden\")\n            render(( <div><HiddeninputC /></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"header\") {\n            console.log(\"it is header\")\n            render(( <div><HeaderC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"file\") {\n            console.log(\"it is file\")\n            render(( <div><FileuploadC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"date\") {\n            console.log(\"it is date\")\n            render(( <div><DatefieldC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"checkbox-group\") {\n            console.log(\"it is checkbox-group\")\n            render(( <div><CheckboxgroupC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"radio-group\") {\n            console.log(\"it is radio-group\")\n            render(( <div><RadioC/></div>), document.getElementById(\"root2\"));\n        } else if(this.storetype === \"select\") {\n            console.log(\"it is select\")\n            render(( <div><SelectC/></div>), document.getElementById(\"root2\"));\n        }else {\n    \n        }   \n        \n        \n        console.log(\"This occurs at the end of the round of rendering\")\n        }\n     }\n\n     render(){\n         return (\n             <div>\n                 <textarea value={this.state.name} onChange={this.handleChange}  style={{ height: 427, width: \"50%\" }}/>\n                 <p></p>\n                 <input type=\"submit\" onClick={this.submitbutton}/>\n\n                \n             </div>\n         )\n     }\n\n    \n}\n\nexport default Demoready","import React, { Component, createRef } from \"react\";\nimport { render } from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from \"react-jsonschema-form\";\nimport schema from '../src/JSONSchema.json';\nimport uiSchema from '../src/UISchema.json';\nimport formData from '../src/formData.json';\n\nimport $ from \"jquery\";\nimport ReactDOM from \"react-dom\";\nimport jQuery from \"jquery\";\n//import \"./styles.css\";\n//import Users class from general.js\nimport TextfieldC from \"../src/classes/TextfieldC\";\nimport TextareaC from \"../src/classes/TextareaC\";\nimport ParagraphC from \"../src/classes/ParagraphC\";\nimport NumberC from \"../src/classes/NumberC\";\nimport HiddeninputC from \"../src/classes/HiddeninputC\";\nimport HeaderC from \"../src/classes/HeaderC\";\nimport FileuploadC from \"../src/classes/FileuploadC\";\nimport DatefieldC from \"../src/classes/DatefieldC\";\nimport SelectC from \"../src/classes/SelectC\";\nimport RadioC from \"../src/classes/RadioC\";\nimport CheckboxgroupC from \"../src/classes/CheckboxgroupC\";\n\n//import Democlass\nimport Demoready from \"./classes/Demoready\";\n\nwindow.jQuery = $;\nwindow.$ = $;\n\nrequire(\"jquery-ui-sortable\");\nrequire(\"formBuilder\");\n\n//import renderMultipleUploadedFile from '../src/classes/renderMultipleUploadedFile.js';\n\nconst log = (type) => console.log.bind(console, type);\n//$(function(){\t$('.build-wrap').formBuilder();});\n//var container = document.getElementById(\"build-wrap\");\n//var formBuilder = $(container).formBuilder();\n\n\nvar options = {\n  disableFields: ['autocomplete','button'],\n  controlOrder: ['header','paragraph','text','textarea','number','hidden','date']\n};\n\nvar fbEditor = document.getElementById('build-wrap');\nvar formBuilder = $(fbEditor).formBuilder(options);\ndocument.getElementById('getJSON').addEventListener('click', function() {\n  alert(formBuilder.actions.getData('json'));\n  var jqfbd = formBuilder.actions.getData('json');\n  console.log(\"content of jqfbd\", jqfbd)\n  console.log(typeof jqfbd)\n  sessionStorage.setItem(\"getjsonstring\", jqfbd)\n  var testjsonstring = sessionStorage.getItem(\"getjsonstring\")\n  console.log(\"content of testjsonstring\", testjsonstring)\n});\n\n//var actionButtons = [{id: \"smile\",className: \"btn btn-success\",label: \"Click this to push data\",type: \"button\",\n    //events: {\n      //click: function() {\n        //alert(\"😁😁😁 !SMILE! 😁😁😁\");\n        //window.sessionStorage.setItem('jqfbformdata', JSON.stringify(data));\n        //var jqfbfd = window.sessionStorage.getItem('jqfbformdata')\n       // console.log(\"formdata\")\n      //}}}];$(container).formBuilder({ actionButtons: actionButtons });\n\n\n      //var fbEditor = document.getElementById('build-wrapeditor');\n//var formBuilder = $(fbEditor).formBuilder();\n//document.getElementById('build-wrapeditor').addEventListener('click', function() {\n//  alert(formBuilder.actions.getData('json', true));\n//});\n\n\n//onsbumit event once submit button is clicked\nconst onSubmit = ({formData}, e) => {\n\n  //see what has been submitted\n  console.log(\"Data submitted: \",  formData);\n\n  //Store formData to be manipulated\n  var obj1 = formData;\n  var filesAccept = obj1.filesAccept;\n      console.log(\"object 1\", obj1);\n      console.log(\"filesAccept\", filesAccept);\n\n      //check file type\n      console.log(typeof filesAccept);\n\n\n\n      //if single file accept is empty then the multi fileaccept is invoked\n      if (filesAccept == null){\n\n        //process multi files\n        console.log('Button clicked');\n        console.log(\"Array of objects\", formData);\n        var arraysAccept = formData.files;\n        console.log(\"Array of objects\", arraysAccept[0]);\n        console.log(\"Array of objects\", arraysAccept[1]);\n        console.log(\"Array of objects\", arraysAccept[2]);\n        var arraysAcceptdissected0 = arraysAccept[0].slice(54);\n        var arraysAcceptdissected1 = arraysAccept[1].slice(56);\n        var arraysAcceptdissected2 = arraysAccept[2].slice(54);\n        console.log(\"arraysAcceptdissected0\", arraysAcceptdissected0);\n        console.log(\"arraysAcceptdissected1\", arraysAcceptdissected1);\n        console.log(\"arraysAcceptdissected2\", arraysAcceptdissected2);\n        var decodeFile0 = atob(arraysAcceptdissected0);\n        var decodeFile1 = atob(arraysAcceptdissected1);\n        var decodeFile2 = atob(arraysAcceptdissected2);\n        console.log(\"decodedFile0\", decodeFile0);\n        console.log(\"decodedFile1\", decodeFile1);\n        console.log(\"decodedFile2\", decodeFile2);\n        const objfd = JSON.parse(decodeFile0);\n        const objjs = JSON.parse(decodeFile1);\n        const objus = JSON.parse(decodeFile2);\n\n        //render multi file uploaded\n        render((\n          <Form\n          schema={objjs}\n          formData={objfd}\n          uiSchema={objus}\n          ></Form>),document.getElementById(\"root\"));\n          return true;\n      }\n\n  //Slice the transmitted string\n    var filesAcceptdissected = filesAccept.slice(50);\n    console.log(\"filesAcceptdissected\", filesAcceptdissected);\n\n  //Convert string to x64\n    var decodeFile = atob(filesAcceptdissected);\n    console.log(\"decodedFile\", decodeFile);\n\n  //Convert string to object to manipulate\n    const obj2 = JSON.parse(decodeFile);\n    console.log(typeof obj2);\n\n  //Draw jsonschema, formData & UiSchema from the object individually\n    var newJsonSchema = obj2[\"jsonSchema\"];\n    var newFormData = obj2[\"formData\"];\n    var newUiSchema = obj2[\"uiSchema\"];\n    console.log(\"jsonschema\", newJsonSchema);\n    console.log(\"formData\", newFormData);\n    console.log(\"UiSchema\", newUiSchema);\n\n  //Render new jsonschema, formData & UiSchema at the position of root in index.html\n    render((\n      <Form\n        schema={newJsonSchema}\n        formData={newFormData}\n        uiSchema={newUiSchema}\n        >\n      </Form>\n    ), document.getElementById(\"root\"));\n}\n\n//event that logs the errors\nconst onError = (errors) => console.log(\"I have\", errors.length, \"errors to fix\"); // On error\n\n//not important at the moment\nfunction clickHandler(e) {\n  console.log('Button clicked')\n  render((\n  <Form schema={schema}></Form>),document.getElementById(\"root\"));\n}\n\nvar classtorendercontroller = 4\nif(classtorendercontroller === 1){\n  console.log('this is one')\n\n//render original full from from schema.json, formData.json and uischmea.json --> button is hard coded atm\nrender((\n  <Form\n    schema={schema}\n    formData={formData}\n    uiSchema={uiSchema}\n    onChange={log(\"changed\")}\n    onSubmit={onSubmit} // On submit\n    onError={onError} // On error\n    >\n    <div>\n      <button id=\"1\" type=\"submit\" >Next</button>\n      <button id=\"2\" type=\"button\" onClick={clickHandler}>Render existing json</button>\n      <button id=\"3\" >What is the time?</button>\n    </div>\n     </Form>\n), document.getElementById(\"root\"));\n\n} else if(classtorendercontroller === 2) {\n  console.log('this is compartment two for demo')\n  render(( <div><TextfieldC/></div>), document.getElementById(\"rooty1\"));\n  render(( <div><TextareaC/></div>), document.getElementById(\"rooty2\"));\n  render(( <div><RadioC/></div>), document.getElementById(\"rooty3\"));\n  render(( <div><DatefieldC/></div>), document.getElementById(\"rooty4\"));\n  render(( <div><FileuploadC/></div>), document.getElementById(\"rooty5\"));\n  render(( <div> <CheckboxgroupC/></div>), document.getElementById(\"rooty6\"));\n  render(( <div><ParagraphC/></div>), document.getElementById(\"rooty7\"));\n  render(( <div><HeaderC/></div>), document.getElementById(\"rooty8\"));\n  render(( <div><NumberC/></div>), document.getElementById(\"rooty9\"));\n  render(( <div> <HiddeninputC/></div>), document.getElementById(\"rooty10\"));\n\n\n  //left with\n  render(( <div><SelectC/></div>), document.getElementById(\"rooty11\"));\n\n} else if (classtorendercontroller === 3){\n  //for isolated testing\n  render(( <div><RadioC/></div>), document.getElementById(\"rooty3\"));\n} else {\n  console.log(\"Annyeong\")\n  /*render(( <div styles={{ width: \"50%\" }}><Demoready/></div>), document.getElementById(\"root1\"));*/\n\n\n\n\n}\n\n\n\n// Toggles the edit mode for the demo\n// @return {Boolean} editMode\n\n/* The order of the imports and requires is very important, especially in the online enviornment.\nThe two jQuery libraries must be imported using Node's require(), and not ES6 import.\nAlso, these two requires MUST come after setting the global jQuery and $ symbols. */\n\n\n\n"],"sourceRoot":""}